@page "/"

<PageTitle>Home</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Spotify Playlist Shuffle</MudText>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="StartSpotifyAuth">Authorise with Spotify</MudButton>

<MudDataGrid Items="@Songs" RowsPerPage="4">
   <Columns>
      <PropertyColumn Property="x => x.Name" Title="Name" />
      <PropertyColumn Property="x => x.Artist" Title="Artist" />
      <PropertyColumn Property="x => x.Album" Title="Album"/>
      <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudStack Row>
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Shuffle</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
   </Columns>
</MudDataGrid>

@code {
   
   private IEnumerable<Song> Songs = new List<Song>();

   protected override async Task OnInitializedAsync()
   {
      var rowCount = new Random().Next(0, 1000);
      for (var i = 0; i < rowCount; i++)
      {
         var newSong = new Song { Name = "Song " + (i + 1), Artist = "Artist " + (i + 1), Album = "Album " + (i + 1) };
         List<Song> songsList = Songs.ToList();
         songsList.Add(newSong);
         Songs = songsList;
      }
      
   }
   
   
   // Function to perform Base64 URL-safe encoding
   private static string Base64UrlEncode(byte[] input)
   {
      // Convert byte array to a regular Base64 string
      var base64 = Convert.ToBase64String(input);

      // Configure the string to be URL-safe
      base64 = base64.Replace("=", "") // Remove any trailing '=' characters used for padding
         .Replace("+", "-") // Replace '+' with '-'
         .Replace("/", "_"); // Replace '/' with '_'

      return base64;
   }

   // Generate the SHA-256 hash and return the URL-safe Base64 encoded version
   private static async Task<string> ComputeSha256HashAndEncode(string plainText)
   {
      using var sha256 = SHA256.Create();
      var bytes = Encoding.UTF8.GetBytes(plainText);
      var hashBytes = await Task.Run(() => sha256.ComputeHash(bytes));
      return Base64UrlEncode(hashBytes);
   }

   private static string GenerateRandomString(int length)
   {
      const string possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        
      // Build the random string using cryptographic random generator
      using var rng = new RNGCryptoServiceProvider();
      var randomBytes = new byte[length];
      rng.GetBytes(randomBytes);
            
      // Convert each byte to a character in the `possible` string
      var chars = randomBytes.Select(b => possible[b % possible.Length]);
      return new string(chars.ToArray());
   }

   private async Task StartSpotifyAuth()
   {
      // Assuming you have the method to generate these strings from previous steps
      var codeVerifier = GenerateRandomString(64);
      var codeChallenge = await ComputeSha256HashAndEncode(codeVerifier);

      // Save to local storage
      await JS.InvokeVoidAsync("localStorageHelper.setItem", "code_verifier", codeVerifier);

      // Call the method to redirect user
      SpotifyAuth.RedirectToSpotifyAuth(new Uri("https://accounts.spotify.com/authorize"), codeChallenge, codeVerifier);
   }
}