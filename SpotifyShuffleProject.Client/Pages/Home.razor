@page "/"
@using System.Web


<PageTitle>Home</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Spotify Playlist Shuffle</MudText>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="StartSpotifyAuth">Authorise with Spotify</MudButton>

<MudDataGrid Items="@_songs" RowsPerPage="4">
	<Columns>
		<PropertyColumn Property="x => x.Name" Title="Name" />
		<PropertyColumn Property="x => x.Artist" Title="Artist" />
		<PropertyColumn Property="x => x.Album" Title="Album" />
		<TemplateColumn CellClass="d-flex justify-end">
			<CellTemplate>
				<MudStack Row>
					<MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Shuffle</MudButton>
				</MudStack>
			</CellTemplate>
		</TemplateColumn>
	</Columns>
</MudDataGrid>

@code {

	private IEnumerable<Song> _songs = new List<Song>();

	protected override async Task OnInitializedAsync()
	{
		var rowCount = new Random().Next(5, 1000);
		for (var i = 0; i < rowCount; i++)
		{
			var newSong = new Song { Name = "Song " + (i + 1), Artist = "Artist " + (i + 1), Album = "Album " + (i + 1) };
			List<Song> songsList = _songs.ToList();
			songsList.Add(newSong);
			_songs = songsList;
		}
	}

	private async Task StartSpotifyAuth()
	{
		try
		{
			var initalResponse = await httpClient.GetAsync("api/Auth/GetSpotifyAuthURL");
			if (initalResponse.IsSuccessStatusCode)
			{
				var result = await initalResponse.Content.ReadFromJsonAsync<AuthResponse>();
				Navigation.NavigateTo(result.uri, forceLoad: true);
			}
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
			throw;
		}
	}

}